datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

model Parent {
  id                       Int       @id @unique @default(autoincrement())
  email                    String    @unique
  password                 String
  firstName                String
  lastName                 String
  status                   Boolean   @default(true)
  birthDate                DateTime?
  phoneNumber              String?
  addressPostal            String?
  relationWithChildren     String?
  children                 Child[]
  resetPasswordToken       String?   @unique
  resetPasswordExpires     DateTime?
  isVerified               Boolean   @default(false)
  verificationToken        String?   @unique
  verificationTokenExpires DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
}

model Child {
  id                Int      @id @default(autoincrement())
  username          String   @unique
  birthDate         DateTime
  password          String
  firstName         String
  lastName          String
  gender            String
  schoolLevel       String
  profilePictureUrl String?
  parent            Parent   @relation(fields: [parentId], references: [id])
  parentId          Int
  status            Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// model Subject {
//   id      Int      @id @default(autoincrement())
//   name    String
//   courses Course[]
// }
//
// model Course {
//   id          Int          @id @default(autoincrement())
//   title       String
//   description String
//   subject     Subject      @relation(fields: [subjectId], references: [id])
//   subjectId   Int
//   lessons     Lesson[]
//   level       String // e.g., Grade or educational level
//   Enrollment  Enrollment[]
// }
//
// model Lesson {
//   id        Int        @id @default(autoincrement())
//   title     String
//   content   String // Could be text, HTML, or a URL to content
//   course    Course     @relation(fields: [courseId], references: [id])
//   courseId  Int
//   exercises Exercise[]
//   quizzes   Quiz[]
//   order     Int // Order within the course
//   Progress  Progress[]
// }
//
// model Exercise {
//   id       Int      @id @default(autoincrement())
//   question String
//   lesson   Lesson   @relation(fields: [lessonId], references: [id])
//   lessonId Int
//   answers  Answer[]
// }
//
// model Answer {
//   id          Int      @id @default(autoincrement())
//   exercise    Exercise @relation(fields: [exerciseId], references: [id])
//   exerciseId  Int
//   child       Child    @relation(fields: [childId], references: [id])
//   childId     Int
//   response    String
//   isCorrect   Boolean
//   submittedAt DateTime @default(now())
// }
//
// model Quiz {
//   id         Int          @id @default(autoincrement())
//   title      String
//   lesson     Lesson       @relation(fields: [lessonId], references: [id])
//   lessonId   Int
//   questions  Question[]
//   QuizResult QuizResult[]
// }
//
// model Question {
//   id              Int      @id @default(autoincrement())
//   content         String
//   quiz            Quiz     @relation(fields: [quizId], references: [id])
//   quizId          Int
//   options         Option[]
//   correctOptionId Int // Reference to the correct option
// }
//
// model Option {
//   id         Int      @id @default(autoincrement())
//   content    String
//   question   Question @relation(fields: [questionId], references: [id])
//   questionId Int
// }
//
// model QuizResult {
//   id      Int      @id @default(autoincrement())
//   child   Child    @relation(fields: [childId], references: [id])
//   childId Int
//   quiz    Quiz     @relation(fields: [quizId], references: [id])
//   quizId  Int
//   score   Int
//   takenAt DateTime @default(now())
// }
//
// model Enrollment {
//   id         Int      @id @default(autoincrement())
//   child      Child    @relation(fields: [childId], references: [id])
//   childId    Int
//   course     Course   @relation(fields: [courseId], references: [id])
//   courseId   Int
//   enrolledAt DateTime @default(now())
// }
//
// model Progress {
//   id        Int            @id @default(autoincrement())
//   child     Child          @relation(fields: [childId], references: [id])
//   childId   Int
//   lesson    Lesson         @relation(fields: [lessonId], references: [id])
//   lessonId  Int
//   status    ProgressStatus @default(NOT_STARTED)
//   updatedAt DateTime       @updatedAt
// }
//
// enum ProgressStatus {
//   NOT_STARTED
//   IN_PROGRESS
//   COMPLETED
// }
//
// model Achievement {
//   id          Int                @id @default(autoincrement())
//   title       String
//   description String
//   criteria    String // JSON or structured data defining criteria
//   children    ChildAchievement[]
// }
//
// model ChildAchievement {
//   id            Int         @id @default(autoincrement())
//   child         Child       @relation(fields: [childId], references: [id])
//   childId       Int
//   achievement   Achievement @relation(fields: [achievementId], references: [id])
//   achievementId Int
//   achievedAt    DateTime    @default(now())
// }
