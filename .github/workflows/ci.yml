name: CI  # The name of the workflow, which is "CI" (Continuous Integration).

on: # Specifies when the workflow should be triggered.
  push: # Trigger the workflow when code is pushed to the repository.
    branches: [ main ]  # The workflow will run only if the push happens to the "main" branch.
  pull_request: # Trigger the workflow when a pull request is opened or updated.
    branches: [ main ]  # The workflow will run for pull requests targeting the "main" branch.

jobs: # Define the jobs to be run in the workflow.
  build: # The name of the job is "build".
    runs-on: ubuntu-latest  # This job will run on the latest Ubuntu virtual machine.

    services: # Define any services needed by the job (like databases).
      postgres: # Set up a PostgreSQL service.
        image: postgres:11.6-alpine  # Use the official PostgreSQL Docker image
        env: # Environment variables for the PostgreSQL service.
          POSTGRES_USER: postgres  # Username for PostgreSQL.
          POSTGRES_PASSWORD: postgres  # Password for PostgreSQL.
          POSTGRES_DB: test_db  # Database name.
        ports: # Map the container's port to the host.
          - 5432:5432  # PostgreSQL listens on port 5432.
        options: >-  # Additional options for PostgreSQL container.
          --health-cmd="pg_isready -U postgres"  # Command to check if PostgreSQL is ready.
          --health-interval=10s  # Check every 10 seconds.
          --health-timeout=5s  # Timeout for each check is 5 seconds.
          --health-retries=5  # Retry up to 5 times if PostgreSQL is not ready.

    env: # Define environment variables for the build job.
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?schema=public  # Connection string for the PostgreSQL database.

    steps: # Define the steps to be run in the "build" job.
      - name: Checkout repository  # Step to check out the repository code.
        uses: actions/checkout@v3  # Use the official GitHub action to check out the code.

      - name: Set up Node.js  # Step to set up Node.js environment.
        uses: actions/setup-node@v3  # Use the official action to set up Node.js.
        with:
          node-version: '22'  # Specify the version of Node.js to use (version 22).
          cache: 'npm'  # Cache npm dependencies to speed up subsequent builds.

      - name: Install dependencies  # Step to install npm dependencies.
        run: npm ci  # Install dependencies using `npm ci`, which is faster and more consistent for CI environments.

      #      - name: Wait for PostgreSQL to be ready  # Step to wait until PostgreSQL is ready before proceeding.
      #        uses: maxkomarychev/wait-action@v1.1.0  # Use a wait action to pause until PostgreSQL is ready.
      #        with:
      #          hosts: localhost:5432  # The PostgreSQL service should be running on this host and port.
      #          timeout: 30  # Wait for up to 30 seconds for PostgreSQL to be ready.
      #          check-interval: 1  # Check the PostgreSQL status every 1 second.

      - name: Set up Prisma  # Step to set up Prisma (an ORM).
        run: npx prisma generate  # Run the command to generate Prisma client code based on the schema.

      - name: Run Prisma migrations  # Step to apply database migrations using Prisma.
        run: npx prisma migrate deploy  # Deploy any pending migrations to the PostgreSQL database.

      - name: Run commitlint  # Step to run commitlint to enforce commit message conventions.
        run: npx commitlint --from=origin/main --to=HEAD  # Lint commits from the main branch to the current head to ensure they follow commit standards.

      - name: Run tests  # Step to run tests for the application.
        run: npm run test:ci  # Run the CI-specific test script.
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}  # Ensure the test environment uses the correct PostgreSQL database URL.

      - name: Upload coverage report  # Step to upload the test coverage report.
        if: always() && success()  # Run this step only if the job was successful.
        uses: actions/upload-artifact@v3  # Use the official GitHub action to upload artifacts.
        with:
          name: coverage-report  # Name the uploaded artifact "coverage-report".
          path: coverage/  # Specify the path to the coverage report files.
