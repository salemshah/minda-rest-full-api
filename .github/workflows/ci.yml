name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?schema=public

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Commitlint
        run: npx commitlint --from=origin/main --to=HEAD

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready"
              break
            else
              echo "Waiting for PostgreSQL..."
              sleep 1
            fi
          done

      - name: Set up Prisma
        run: |
          if npm run prisma:generate; then
            echo "Prisma client generated successfully."
          else
            echo "Failed to generate Prisma client."
            exit 1
          fi

      - name: Run Prisma migrations
        run: |
          if npm run prisma:migrate:deploy; then
            echo "Prisma migrations deployed successfully."
          else
            echo "Failed to deploy Prisma migrations."
            exit 1
          fi

      - name: Validate Prisma Schema
        run: |
          if npx prisma validate; then
            echo "Prisma schema is valid."
          else
            echo "Prisma schema validation failed."
            exit 1
          fi

      - name: Check Prisma Database Connection
        run: |
          if npx prisma db pull; then
            echo "Prisma successfully connected to PostgreSQL."
          else
            echo "Failed to connect Prisma to PostgreSQL."
            exit 1
          fi
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run Linting
        run: npm run lint:ci

      - name: Run commitlint
        run: npx commitlint --from=origin/main --to=HEAD

      - name: Run tests
        run: npm run test:ci
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Upload coverage report
        if: always() && success()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
