name: CI/CD Pipeline

env:
  SERVER_DIR: "/root/minda-rest-full-api"

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?schema=public

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready"
              break
            else
              echo "Waiting for PostgreSQL..."
              sleep 1
            fi
          done

      - name: Set up Prisma
        run: npm run prisma:generate

      - name: Run Prisma migrations
        run: npm run prisma:migrate:deploy

      - name: Validate Prisma Schema
        run: npx prisma validate

      - name: Run Linting
        run: npm run lint:ci

      - name: Run commitlint
        run: npx commitlint --from=origin/main --to=HEAD

      - name: Run tests
        run: npm run test:ci
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/minda-rest-full-api:latest

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Create .env on Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ env.SERVER_DIR }}"
          echo "${{ vars.ENV_PROD_FILE }}" | tr -d '\r' | ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cat > ${{ env.SERVER_DIR }}/.env"

      - name: Copy docker-compose.prod.yml to Server
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ env.SERVER_DIR }}/docker-compose.prod.yml

      - name: Copy Nginx config to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ env.SERVER_DIR }}/nginx/conf.d"
          scp -o StrictHostKeyChecking=no nginx/conf.d/default.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ env.SERVER_DIR }}/nginx/conf.d/default.conf

      - name: Deploy Containers without Certbot
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
          cd ${{ env.SERVER_DIR }}
          docker compose --env-file .env -f docker-compose.prod.yml up -d app db nginx
          EOF

      - name: Initialize Let's Encrypt Certificates
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          ssh -tt -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          cd ${{ env.SERVER_DIR }}
          sudo apt-get update && sudo apt-get upgrade -y
          docker compose -f docker-compose.prod.yml up -d --remove-orphans
          docker compose -f docker-compose.prod.yml run --rm certbot certonly \
            --webroot \
            --webroot-path /var/www/certbot/ \
            --email salemshahdev@gmail.com \
            --agree-tos \
            --non-interactive \
            -d vps99465.serveur-vps.net
          docker compose -f docker-compose.prod.yml exec nginx nginx -s reload
          EOF

      - name: Deploy Certbot Service for Renewals
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
          cd ${{ env.SERVER_DIR }}
          docker compose --env-file .env -f docker-compose.prod.yml up -d certbot
          EOF
