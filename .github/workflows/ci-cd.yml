name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?schema=public

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Commitlint
        run: npx commitlint --from=origin/main --to=HEAD

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready"
              break
            else
              echo "Waiting for PostgreSQL..."
              sleep 1
            fi
          done

      - name: Set up Prisma
        run: |
          if npm run prisma:generate; then
            echo "Prisma client generated successfully."
          else
            echo "Failed to generate Prisma client."
            exit 1
          fi

      - name: Run Prisma migrations
        run: |
          if npm run prisma:migrate:deploy; then
            echo "Prisma migrations deployed successfully."
          else
            echo "Failed to deploy Prisma migrations."
            exit 1
          fi

      - name: Validate Prisma Schema
        run: |
          if npx prisma validate; then
            echo "Prisma schema is valid."
          else
            echo "Prisma schema validation failed."
            exit 1
          fi

      - name: Check Prisma Database Connection
        run: |
          if npx prisma db pull; then
            echo "Prisma successfully connected to PostgreSQL."
          else
            echo "Failed to connect Prisma to PostgreSQL."
            exit 1
          fi
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run Linting
        run: npm run lint:ci

      - name: Run commitlint
        run: npx commitlint --from=origin/main --to=HEAD

      - name: Run tests
        run: npm run test:ci
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Upload coverage report
        if: always() && success()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository (current commit)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 3: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/minda-rest-full-api:latest

      # Step 4: Checkout the main branch to get docker-compose.yml and Nginx config
      - name: Checkout main branch for deployment files
        uses: actions/checkout@v3
        with:
          ref: main
          path: deployment-files  # Checkout into a separate directory

      # Step 5: Copy docker-compose.yml to Server from main branch
      - name: Copy docker-compose.yml to Server
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_HOST }}
          SERVER_DIR: "/home/${{ secrets.SERVER_USER }}/minda-rest-full-api"
        run: |
          scp -i ${{ secrets.SERVER_SSH_KEY }} -o StrictHostKeyChecking=no deployment-files/docker-compose.yml ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:${{ env.SERVER_DIR }}/docker-compose.yml

      # Step 6: Copy Nginx config to Server from main branch
      - name: Copy Nginx config to Server
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_HOST }}
          NGINX_CONF_DIR: "/etc/nginx/conf.d"          # Updated to match docker-compose volumes
          NGINX_ENABLED_DIR: "/etc/nginx/sites-enabled"
        run: |
          scp -i ${{ secrets.SERVER_SSH_KEY }} -o StrictHostKeyChecking=no deployment-files/nginx/yourapp.conf ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:/tmp/yourapp.conf
          ssh -i ${{ secrets.SERVER_SSH_KEY }} -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "sudo cp /tmp/yourapp.conf ${{ env.NGINX_CONF_DIR }}/yourapp.conf && sudo ln -sf ${{ env.NGINX_CONF_DIR }}/yourapp.conf ${{ env.NGINX_ENABLED_DIR }}/yourapp.conf"

      # Step 7: Deploy Containers and Restart Nginx
      - name: Deploy Containers and Restart Nginx
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_HOST }}
          SERVER_DIR: "/home/${{ secrets.SERVER_USER }}/minda-rest-full-api"
        run: |
          ssh -i ${{ secrets.SERVER_SSH_KEY }} -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} << 'EOF'
            cd ${{ env.SERVER_DIR }}
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
            sudo nginx -t && sudo systemctl reload nginx
          EOF

      # Step 8: op: Initialize Let's Encrypt Certificates
      - name: Initialize Let's Encrypt Certificates
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_HOST }}
          SERVER_DIR: "/home/${{ secrets.SERVER_USER }}/minda-rest-full-api"
        run: |
          ssh -i ${{ secrets.SERVER_SSH_KEY }} -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} << 'EOF'
            cd ${{ env.SERVER_DIR }}
            docker-compose run certbot certonly --webroot --webroot-path=/usr/share/nginx/html -d your_domain.com --email your_email@example.com --agree-tos --no-eff-email
            docker-compose exec nginx nginx -s reload
          EOF
